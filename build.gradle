plugins {
    alias libs.plugins.fabric.loom
    alias libs.plugins.legacy.looming
    id "maven-publish"
}

version = "$mod_version+$target_version"
group = maven_group

base {
    archivesName = archives_name
}

// intentionally do not apply accessWidener, makes it difficult to check the access and thus necessity of its contents
loom {
    runConfigs.configureEach {
        ideConfigGenerated = false
    }
}

repositories {
    mavenLocal()
    maven { url "https://jitpack.io" }
}

dependencies {
    minecraft libs.minecraft
    mappings legacy.yarn(libs.versions.minecraft.get(), libs.versions.yarn.build.get())
    modImplementation libs.fabric.loader
    include(modImplementation libs.fabric.asm.get())
    include(implementation libs.mapping.io.get())
    include(implementation libs.tiny.remapper.get())
    runtimeOnly(files "libs/optifine-mapped.jar")
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (java.toolchain.languageVersion.get() >= JavaLanguageVersion.of(9)) it.options.release.set(8)
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
    from("LICENSE")
}

publishing {
    publications.create("mavenJava", MavenPublication) {
        from components.java
    }
    repositories {}
}
